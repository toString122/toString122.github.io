<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Mybatis</title>
    <url>/2020/02/13/Mybatis%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<p><strong>环境</strong></p>
<ul>
<li>JDK1.8</li>
<li>Mysql 5.7</li>
<li>maven 3.6.1</li>
<li>IDEA</li>
</ul>
<p><strong>回顾</strong></p>
<ul>
<li>JDBC</li>
<li>Mysql</li>
<li>Java基础</li>
<li>Maven</li>
<li>Junit</li>
</ul>
<p><strong>框架</strong>：配置文件。最好的方式就是看官网文档</p>
<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h1><p><img src="C:%5CUsers%5Cliwen%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200213122746371.png" alt="image-20200213122746371"></p>
<ul>
<li>MyBatis 是一款优秀的<strong>持久层框架</strong>。</li>
<li>它支持定制化 SQL、存储过程以及高级映射。</li>
<li>MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。</li>
<li>MyBatis 可以使用简单的 XML 或注解来配置和映射原生类型、接口和 Java 的 POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</li>
<li>MyBatis 本是<a href="https://baike.baidu.com/item/apache/6265" target="_blank" rel="noopener">apache</a>的一个开源项目<a href="https://baike.baidu.com/item/iBatis" target="_blank" rel="noopener">iBatis</a>, 2010年这个项目由apache software foundation 迁移到了google code，并且改名为MyBatis </li>
<li>2013年11月迁移到Github。</li>
</ul>
<p>如何获得Mybatis？</p>
<ul>
<li><p>maven仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- https:&#x2F;&#x2F;mvnrepository.com&#x2F;artifact&#x2F;org.mybatis&#x2F;mybatis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.6&lt;&#x2F;version&gt;</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Github <a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3/releases</a></p>
</li>
<li><p>中文文档 <a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></p>
</li>
</ul>
<h3 id="1-1持久化"><a href="#1-1持久化" class="headerlink" title="1.1持久化"></a>1.1持久化</h3><p>数据持久化</p>
<ul>
<li><p>持久化就是将程序的数据在持久状态和瞬时状态转化的过程。</p>
</li>
<li><p>内存：<strong>断电即失</strong></p>
</li>
<li><p>数据库（jdbc），io文件持久化。</p>
</li>
<li><p>生活：冷藏，罐头</p>
</li>
</ul>
<p><strong>为什么需要持久化？</strong></p>
<ul>
<li><p>有一些对象，不能让他丢掉。</p>
</li>
<li><p>内存太贵</p>
</li>
</ul>
<h3 id="1-2持久层"><a href="#1-2持久层" class="headerlink" title="1.2持久层"></a>1.2持久层</h3><p>层？ DAO层，Controller层，Service层。。。。</p>
<ul>
<li><p>完成持久化工作的代码块</p>
</li>
<li><p>层是界限明显的</p>
</li>
</ul>
<h3 id="1-3为什么需要Mybatis"><a href="#1-3为什么需要Mybatis" class="headerlink" title="1.3为什么需要Mybatis"></a>1.3为什么需要Mybatis</h3><ul>
<li>简单易学</li>
<li>灵活</li>
<li>解除SQL与程序代码的耦合，提高可维护性</li>
<li>提供XML标签支持，支持编写动态SQL。</li>
<li>提供对象关系映射标签，支持对象关系组建维护</li>
</ul>
<p><strong>最重要的是：使用的人多啊！</strong></p>
]]></content>
      <categories>
        <category>Mybatis</category>
      </categories>
  </entry>
  <entry>
    <title>测试文章</title>
    <url>/2020/02/13/Ajax/</url>
    <content><![CDATA[<h1 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h1><p>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</p>
<p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法。</p>
<p>AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下。</p>
<p>简而言之就是一种页面无刷新技术</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol>
<li><p>搜索框</p>
<p>输入部分内容与服务器交互自动补全余下内容</p>
</li>
<li><p>用户注册</p>
<p>输入用户名可自动在后台查询是否可用</p>
</li>
<li><p>验证码识别</p>
<p>不用手动提交页面即可判断验证码是否正确</p>
</li>
</ol>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">   type: <span class="string">"POST"</span>,<span class="comment">//可设置GET和POST，默认为GET</span></span><br><span class="line">   url: <span class="string">"/testA1"</span>,<span class="comment">//请求地址</span></span><br><span class="line">   data: <span class="string">"name=123"</span>,<span class="comment">//向后端发送的数据</span></span><br><span class="line">   success: <span class="function"><span class="keyword">function</span>(<span class="params">msg</span>)</span>&#123;<span class="comment">//执行成功后的回调函数</span></span><br><span class="line">     alert( <span class="string">"Data Saved: "</span> + msg );</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="服务器返回字符串的几种方式"><a href="#服务器返回字符串的几种方式" class="headerlink" title="服务器返回字符串的几种方式"></a>服务器返回字符串的几种方式</h3><ol>
<li>直接使用response</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.getWriter().prient(result);</span><br></pre></td></tr></table></figure>

<p>   2.在方法上使用注解</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@ResponseBody</span><br></pre></td></tr></table></figure>

<p>这样方法返回的数据会转化为一串文本</p>
]]></content>
      <categories>
        <category>Ajax</category>
      </categories>
  </entry>
</search>
